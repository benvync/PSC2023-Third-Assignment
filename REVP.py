def reverse_complement(DNA):
    complement = {'A': 'T', 'C': 'G', 'G': 'C', 'T': 'A'}
    return ''.join(complement[base] for base in reversed(DNA))

def find_reverse_palindromes(DNA_string):
    results = []
    min_length, max_length = 4, 12

    for i in range(len(DNA_string)):
        for j in range(min_length, min(max_length + 1, len(DNA_string) - i + 1)):
            substr = DNA_string[i:i + j]
            rev_substr = reverse_complement(substr)
            if substr == rev_substr:
                results.append((i + 1, j))  # Add position and length
    return results

DNA_sequence = "GCGCTCGCGGCTACGCATCCCTGGTCCAATGGGCTCTGCCACAGAACTCACTACTCACCTATCCCGAGCGGGACAATCGCGTAGCGGAAATATGGCAGACTTAGCAGAACTGACTCTTTCGCACACCCTTTGTCTGAGTGTCTTGTGCGCATGATTGCTTCGAACCACTGTGTGGGCCGAGAACATGTCCCGTAAATTAGGTTCTGTAGGTGCTTCCGGGGGATTGACGTGATTCGCACAAAAGGTATTCTTCGGGCGTTGTTGATCCCGAAAGCACAGTTATTCCTTCGGATGATAGACGGGCATTTAGTGTACACAGCCCTAAGAGCCAGCACGGGCGAAATTTGTTAATGTTTCAGGACCGCCCCACAGTTGTGGGGACACAGGCCACAAACCTTTAAGGGAGGGCCGACTTCGGTTCATGTTGGGCATTAGCTCGCGAGTAGCGCACCGGCTCGTCCTTCTAGATTGGCACTCTCGTCTCGGCGTGCACGCCGGGTACGCCGCGTCCCTCTGAGTGACGGCGGCGGTGTCCGACTGTGTATTCGACTAACACAACCAGAGTCTCACGTATTGGTGATCTGCGCATTAGATCGCCTAGGATCGTCAGGTGAGATAGGCTTGTAACCGGGTGTAAGAGAGCTGGTTCATCTATGGTCCTAATCCTTTCTCAGCGGCGCGTTGCCTGGGAACTGACAATGACCGAATATTTAGACGTGGTGACCGTAGTTCTTTTTGCAGGGTACCGCATTGGATACTAGTGAGAATGCGCTGCCCATCATGAATGTCCTCACGACGTGGGTGTTACGCATGTGTGAATTATAGTCCCCCAGGCAGTATTTTACGGCCGAGTCTCGGCAAGACCTGCGCCTGTGAATTTTCTATCCCCTGCATCGTCCCATTTATATGAAGCGCAGCTCGGCACGGGCCTTTAATCCATCATCCGGTATGCAGTAACCTGATACTTTAGCGAGCGATAT"
reverse_palindromes = find_reverse_palindromes(DNA_sequence)

for pos, length in reverse_palindromes:
    print(f"{pos} {length}")
